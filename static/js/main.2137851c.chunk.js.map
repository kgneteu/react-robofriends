{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","ErrorBoundary","props","state","hasError","info","this","setState","children","Component","App","searchField","useSelector","searchRobots","isPending","useDispatch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","style","position","top","textAlign","width","height","zIndex","event","target","value","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2137851c.chunk.js","sourcesContent":["import {apiCall} from './api/api'\r\nimport {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({type: CHANGE_SEARCHFIELD, payload: text})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error('Errrrrror!')\r\n  // }\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n    const {searchField,} = useSelector(state => state.searchRobots)\r\n    const {robots, isPending} = useSelector(state => state.requestRobots)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(requestRobots());\r\n    }, [dispatch])\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <header style={{position: 'fixed', top: 0, textAlign: 'center', width: '100%', height: '200px', zIndex: '100'}}>\r\n                <h1 className='f1 center'>RoboFriends</h1>\r\n                <SearchBox className={'ml-auto'}\r\n                           searchChange={(event) => dispatch(setSearchField(event.target.value))}/>\r\n            </header>\r\n            <div className='tc'>\r\n                <div style={{marginTop: '200px'}}>\r\n                    {isPending ? <h1>Loading</h1> :\r\n\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default App; //connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {requestRobots, searchRobots} from './reducers'\r\n\r\nimport './index.css';\r\nimport ErrorBoundary from \"./components/ErrorBoundry\";\r\n\r\nconst logger = createLogger()\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ErrorBoundary>\r\n            <App/>\r\n        </ErrorBoundary>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}