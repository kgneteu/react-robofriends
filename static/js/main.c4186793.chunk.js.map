{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/SearchBox.js","containers/Header.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","props","state","hasError","info","this","setState","children","Component","SearchBox","searchfield","searchChange","placeholder","onChange","React","memo","useState","scrolled","setScrolled","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","style","position","top","textAlign","width","height","zIndex","boxShadow","transition","App","searchField","useSelector","searchRobots","isPending","useDispatch","filteredRobots","filter","robot","toLowerCase","includes","handleSearchChange","useCallback","event","target","value","marginTop","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","store","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c4186793.chunk.js","sourcesContent":["import {apiCall} from './api/api'\r\nimport {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({type: CHANGE_SEARCHFIELD, payload: text})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error('Errrrrror!')\r\n  // }\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, {useEffect, useState} from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nconst Header = props => {\r\n    const [scrolled, setScrolled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setScrolled(window.scrollY > 8);\r\n        }\r\n        window.addEventListener(\"scroll\", handleScroll)\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", () => handleScroll)\r\n        }\r\n    }, [])\r\n\r\n        // console.log('repaint')\r\n    return (\r\n        <header\r\n            style={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                textAlign: \"center\",\r\n                width: \"100%\",\r\n                height: \"200px\",\r\n                zIndex: \"100\",\r\n                boxShadow: scrolled ? \"0 4px 4px rgba(0, 0, 0, 0.4)\" : \"none\",\r\n                transition: \"all 0.2s ease-out\",\r\n            }}>\r\n            <h1 className=\"f1 center\">RoboFriends</h1>\r\n            <SearchBox className={\"ml-auto\"} searchChange={props.searchChange}/>\r\n        </header>\r\n    )\r\n};\r\n\r\n\r\nHeader.propTypes = {\r\n    searchChange: PropTypes.func\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const {searchField,} = useSelector(state => state.searchRobots)\r\n    const {robots, isPending} = useSelector(state => state.requestRobots)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(requestRobots());\r\n    }, [dispatch])\r\n\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    const handleSearchChange = useCallback(event => dispatch(setSearchField(event.target.value)),\r\n        [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Header searchChange={handleSearchChange}/>\r\n            <div className='tc'>\r\n                <div style={{marginTop: '200px'}}>\r\n                    {isPending ? <h1>Loading</h1> :\r\n\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default App; //connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {requestRobots, searchRobots} from './reducers'\r\n\r\nimport './index.css';\r\nimport ErrorBoundary from \"./components/ErrorBoundry\";\r\n\r\n\r\n//if (process.env.NODE_ENV === 'development') {\r\n\r\n//}\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\nconst useLogger = false;\r\nlet store;\r\nif (useLogger){\r\n    const logger = createLogger()\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n} else {\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\r\n}\r\n\r\n\r\n//\r\n// const whyDidYouRender = require('@welldone-software/why-did-you-render');\r\n// whyDidYouRender(React );\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ErrorBoundary>\r\n            <App/>\r\n        </ErrorBoundary>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}