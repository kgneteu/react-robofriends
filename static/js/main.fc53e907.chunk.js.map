{"version":3,"sources":["serviceWorkerRegistration.js","store/constants.ts","store/actions.ts","api/api.js","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","containers/Header.tsx","containers/App.tsx","store/index.tsx","store/reducers.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","response","json","data","payload","Card","name","email","id","className","style","width","alt","src","CardList","robots","map","robot","SearchBox","searchChange","placeholder","onChange","Header","useState","scrolled","setScrolled","useEffect","handleScroll","scrollY","addEventListener","removeEventListener","position","top","textAlign","height","zIndex","boxShadow","transition","React","memo","App","store","searchField","useSelector","searchRobots","isPending","useDispatch","filteredRobots","filter","toLowerCase","includes","handleSearchChange","useCallback","event","text","currentTarget","value","Fragment","marginTop","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","StoreProvider","children","ReactDOM","render","document","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fc53e907.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {apiCall} from '../api/api'\r\nimport {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const setSearchField = (text: string) => ({type: CHANGE_SEARCHFIELD, payload: text})\r\n\r\nexport const requestRobots = () => (dispatch: Dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\nimport {IRobot} from \"../store/reducers\";\r\n\r\nconst Card: React.FunctionComponent<IRobot> = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' style={{width: '20rem'}}>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport {IRobot} from \"../store/reducers\";\r\n\r\n\r\ntype ComponentProps = {\r\n    robots: Array<IRobot>\r\n}\r\nconst CardList = ({robots}: ComponentProps): JSX.Element => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot) => {\r\n                    return (\r\n                        <Card\r\n                            key={robot.id}\r\n                            id={robot.id}\r\n                            name={robot.name}\r\n                            email={robot.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React, {SyntheticEvent} from 'react';\r\n\r\ntype ComponentProps = {\r\n    searchChange(event: SyntheticEvent<HTMLInputElement>): void;\r\n    className: string\r\n}\r\nconst SearchBox = ({searchChange}: ComponentProps) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {SyntheticEvent, useEffect, useState} from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\ntype ComponentProps = {\r\n    searchChange(event: SyntheticEvent<HTMLInputElement>): void\r\n}\r\nconst Header = ({searchChange}: ComponentProps) => {\r\n    const [scrolled, setScrolled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setScrolled(window.scrollY > 8);\r\n        }\r\n        window.addEventListener(\"scroll\", handleScroll)\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", () => handleScroll)\r\n        }\r\n    }, [])\r\n\r\n    // console.log('repaint')\r\n    return (\r\n        <header\r\n            style={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                textAlign: \"center\",\r\n                width: \"100%\",\r\n                height: \"200px\",\r\n                zIndex: 100,\r\n                boxShadow: scrolled ? \"0 4px 4px rgba(0, 0, 0, 0.4)\" : \"none\",\r\n                transition: \"all 0.2s ease-out\",\r\n            }}>\r\n            <h1 className=\"f1 center\">RoboFriends</h1>\r\n            <SearchBox className={\"ml-auto\"} searchChange={searchChange}/>\r\n        </header>\r\n    )\r\n};\r\n\r\n\r\nHeader.propTypes = {\r\n    searchChange: PropTypes.func\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, {SyntheticEvent, useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {requestRobots, setSearchField} from '../store/actions';\r\n\r\nimport CardList from '../components/CardList';\r\n\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\nimport {IRobot, IState} from \"../store/reducers\";\r\n\r\n\r\nfunction App(): JSX.Element {\r\n    const {searchField} = useSelector((state: IState) => state.searchRobots)\r\n    const {robots, isPending} = useSelector((state: IState) => state.requestRobots)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(requestRobots());\r\n        //console.log(process.env.REACT_APP_SOME_VARIABLE)\r\n    }, [dispatch])\r\n\r\n\r\n    const filteredRobots = robots.filter((robot: IRobot) => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    const handleSearchChange = useCallback(\r\n        (event: SyntheticEvent<HTMLInputElement>) =>\r\n            dispatch(setSearchField(event.currentTarget.value)),\r\n        [dispatch]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header searchChange={handleSearchChange}/>\r\n            <div className='tc'>\r\n                <div style={{marginTop: '200px'}}>\r\n                    {isPending ? <h1>Loading</h1> :\r\n                        <CardList robots={filteredRobots}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default App; //connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport {requestRobots, searchRobots} from \"./reducers\";\r\nimport {createLogger} from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {Provider} from \"react-redux\";\r\nimport React, {PropsWithChildren} from \"react\";\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\nconst useLogger = false;\r\nlet store: Store;\r\nif (useLogger) {\r\n    const logger = createLogger()\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n} else {\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\r\n}\r\n\r\nconst StoreProvider = ({children}:PropsWithChildren<{}>) => {\r\n    return (\r\n        <Provider store={store}>\r\n            {children}\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default StoreProvider;\r\n","import {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants';\r\nimport {AnyAction} from \"redux\";\r\n\r\n\r\nexport interface IRobot {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n}\r\n\r\ninterface IStateRobots {\r\n    robots: Array<IRobot>;\r\n    isPending: boolean\r\n}\r\n\r\ninterface ISearchState {\r\n    searchField: string;\r\n}\r\n\r\nconst initialStateSearch: ISearchState = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state: ISearchState = initialStateSearch,\r\n                             action: AnyAction) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots: IStateRobots = {\r\n    robots: [],\r\n    isPending: true\r\n}\r\n\r\nexport interface IState {\r\n    searchRobots: {\r\n        searchField: string;\r\n    };\r\n    requestRobots: IStateRobots\r\n}\r\n\r\nexport const requestRobots = (state: IStateRobots = initialStateRobots, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport StoreProvider from \"./store\";\r\n\r\n\r\nReactDOM.render(\r\n    <StoreProvider>\r\n        <App/>\r\n    </StoreProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n"],"sourceRoot":""}