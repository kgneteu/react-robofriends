{"version":3,"sources":["serviceWorker.js","actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/Header.js","containers/App.js","index.js","reducers.js"],"names":["Boolean","window","location","hostname","match","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","React","memo","props","useState","scrolled","setScrolled","useEffect","handleScroll","scrollY","addEventListener","removeEventListener","style","position","top","textAlign","width","height","zIndex","boxShadow","transition","App","store","searchField","useSelector","state","searchRobots","isPending","useDispatch","filteredRobots","filter","robot","toLowerCase","includes","handleSearchChange","useCallback","event","target","value","marginTop","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d4302a7.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {apiCall} from './api/api'\r\nimport {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({type: CHANGE_SEARCHFIELD, payload: text})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, {useEffect, useState} from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nconst Header = props => {\r\n    const [scrolled, setScrolled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setScrolled(window.scrollY > 8);\r\n        }\r\n        window.addEventListener(\"scroll\", handleScroll)\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", () => handleScroll)\r\n        }\r\n    }, [])\r\n\r\n        // console.log('repaint')\r\n    return (\r\n        <header\r\n            style={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                textAlign: \"center\",\r\n                width: \"100%\",\r\n                height: \"200px\",\r\n                zIndex: \"100\",\r\n                boxShadow: scrolled ? \"0 4px 4px rgba(0, 0, 0, 0.4)\" : \"none\",\r\n                transition: \"all 0.2s ease-out\",\r\n            }}>\r\n            <h1 className=\"f1 center\">RoboFriends</h1>\r\n            <SearchBox className={\"ml-auto\"} searchChange={props.searchChange}/>\r\n        </header>\r\n    )\r\n};\r\n\r\n\r\nHeader.propTypes = {\r\n    searchChange: PropTypes.func\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\n\r\nimport './App.css';\r\nimport Header from \"./Header\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const {searchField,} = useSelector(state => state.searchRobots)\r\n    const {robots, isPending} = useSelector(state => state.requestRobots)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(requestRobots());\r\n    }, [dispatch])\r\n\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    const handleSearchChange = useCallback(event => dispatch(setSearchField(event.target.value)),\r\n        [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Header searchChange={handleSearchChange}/>\r\n            <div className='tc'>\r\n                <div style={{marginTop: '200px'}}>\r\n                    {isPending ? <h1>Loading</h1> :\r\n                        <CardList robots={filteredRobots}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default App; //connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\nimport {requestRobots, searchRobots} from './reducers'\r\n\r\nimport './index.css';\r\n\r\n\r\n//if (process.env.NODE_ENV === 'development') {\r\n\r\n//}\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\nconst useLogger = false;\r\nlet store;\r\nif (useLogger) {\r\n    const logger = createLogger()\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n} else {\r\n    store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\r\n}\r\n\r\n\r\n//\r\n// const whyDidYouRender = require('@welldone-software/why-did-you-render');\r\n// whyDidYouRender(React );\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"],"sourceRoot":""}